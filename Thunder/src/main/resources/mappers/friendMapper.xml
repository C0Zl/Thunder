<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.thunder.model.dao.FriendDao">
	
	<!--전체 유저 조회-->
	<select id="selectAllUsers" resultType="User">
		SELECT * FROM user
	</select>
	
	<!--전체 유저 중 검색 조회-->
	<select id="selectUserByName" parameterType="String" resultType="User">
		SELECT * FROM user
		WHERE name LIKE CONCAT ('%', #{searchName},'%')
	</select>
	
	<!--친구 맺기-->
	<insert id="insertFriend" parameterType="Map">
		INSERT INTO friend (from_user_id, to_user_id)
		VALUES(#{fromUserId}, #{toUserId})		
	</insert>
	
	<!--친구 삭제-->
	<delete id="deleteFriend" parameterType="Map">
		DELETE FROM friend
		WHERE  (( from_user_id = #{loginUserId} AND to_user_id = #{friendId} )
		OR ( to_user_id = #{loginUserId} AND from_user_id = #{friendId} ))
		AND status = 1
	</delete>
	
	<!--친구 요청 조회-->
	<select id="selectAllRequest" parameterType="String" resultType="User">
		SELECT * FROM user
		WHERE id = (SELECT from_user_id FROM friend
		WHERE to_user_id = #{loginUserId} AND status = 0)
	</select>
	
	<!--친구 요청 수락-->
	<update id="updateStatus" parameterType="Map">
		UPDATE friend
		SET status = 1
		WHERE to_user_id = #{loginUserId} AND from_user_id = #{friendId}
	</update>
	
	<!--친구 요청 거절/삭제-->
	<delete id="deleteRequest" parameterType="Map">
		DELETE from friend
		WHERE to_user_id = #{loginUserId} AND from_user_id = #{friendId} AND status=0
	</delete>
	
	<!--친구가 관리하는 번개 조회-->
	<select id="selectFriendSchedule" parameterType="String" resultType="Schedule">
		SELECT * FROM schedule
		WHERE manager_id = #{friendId}
	</select>
	
	<!--친구 전체 조회-->
	<select id="selectAllFriend" parameterType="String" resultType="User">
		SELECT * FROM user
		WHERE 
		id = (
			SELECT from_user_id FROM friend
			WHERE to_user_id = #{loginUserId} AND status=1
		)
		OR
		id = (
			SELECT to_user_id FROM friend
			WHERE from_user_id = #{loginUserId} AND status=1
		)
	</select>
	
	<!--검색어로 친구 검색 조회-->
	<select id="selectFriendByName" parameterType="Map" resultType="User">
		SELECT * FROM user
		WHERE 
		(id = (
			SELECT from_user_id FROM friend
			WHERE to_user_id = #{loginUserId} AND status=1
		)
		OR
		id = (
			SELECT to_user_id FROM friend
			WHERE from_user_id = #{loginUserId} AND status=1
		)) 
		AND name LIKE CONCAT ('%', #{searchName},'%')
	</select>
	
	<!--친구요청도 없고 찬규도 아닌 관계인지 확인-->
	<select id="selectNoFriend" parameterType="Map" resultType="int">
		SELECT IFNULL(COUNT(*),0) FROM friend
		WHERE  (( from_user_id = #{loginUserId} AND to_user_id = #{friendId} )
		OR ( to_user_id = #{loginUserId} AND from_user_id = #{friendId} ))
	</select>
	
	<!--친구인지 확인-->
	<select id="selectFriend" parameterType="map" resultType="int">
		SELECT IFNULL(COUNT(*),0) FROM friend
		WHERE  (( from_user_id = #{loginUserId} AND to_user_id = #{friendId} )
		OR ( to_user_id = #{loginUserId} AND from_user_id = #{friendId} ))
		AND status = 1
	</select>
	
	<!--로그인 유저사 요청 보낸 친구인지-->
	<select id="selectWait" parameterType="map" resultType="int">
		SELECT IFNULL(COUNT(*),0) FROM friend
		WHERE from_user_id = #{loginUserId} AND to_user_id = #{friendId} AND status=0
	</select>
</mapper>